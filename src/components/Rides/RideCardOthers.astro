---
import {formatDate} from '../../utils';

const { allRides, loggedIn } = Astro.props;
let rowCounter = 0;

const backendUrl = import.meta.env.PUBLIC_BACKEND_URL;
---

{
    allRides.map((ri: any, index: any) => (
        <div class="max-w-[400px] max-h-[800px] sm:max-w-[400px] h-full bg-white border border-black shadow-lg hover:shadow-[-7px_7px_0px_#000000] flex flex-col">
            <img
                src={"/images/posts/ride-1/ride1.jpeg"}
                alt="ride cover"
                class="border-b border-black"
                loading="lazy"
                decoding="async"
                width="400"
                height="400"
            />
            <a href={`/ride/${ri._id}`} class="block hover:no-underline text-black">
                <div class="pt-3 pb-0">
                    <p class="w-[75%] mt-5 p-2 inline-block bg-black text-white text-sm text-center">
                        {ri.title}
                    </p>
                </div>

            <div class="p-5 flex-grow">
                <div class="flex justify-between gap-5 mb-2">
                    <p class="mb-2 text-lg font-medium tracking-tight text-gray-900">
                        From : {ri.from}
                    </p>
                    <p class="mb-2 text-lg font-medium tracking-tight text-gray-900">
                        To : {ri.to}
                    </p>
                </div>
                <div class="flex justify-between gap-4 mb-2">
                    <p class="mb-2 text-lg font-medium tracking-tight text-gray-900">
                        Date: {formatDate(ri.date)}
                    </p>
                    <p class="mb-2 text-lg font-medium tracking-tight text-gray-900">
                        Duration : {ri.duration}
                    </p>
                </div>
                <p class="mb-2 text-md font-medium tracking-tight text-gray-900 pb-4">
                    Riders Registered : {ri.riders.length}
                </p>

                <p class="mb-3 text-sm tracking-tight text-gray-700 line-clamp-4">
                    {ri.description}
                </p>
            </a>

            </div>
            <div class="ride-card p-5">
                <div class="join-btn mt-auto inline-flex items-center py-2 font-semibold text-center cursor-pointer" data-ride-id={ri._id}>
                    Join Ride 
                </div>
                <div class="result"></div>
            </div>
        </div>
    ))
}


<script is:inline define:vars={{backendUrl}}>
  document.addEventListener("astro:page-load", () => {
    const token = sessionStorage.getItem("token");
    const user = JSON.parse(sessionStorage.getItem("user"));
    const joinBtn = document.querySelectorAll(".join-btn");
    const result = document.getElementById("result");

    if (token) {
      if (joinBtn) {
        joinBtn.forEach((btn) => {
          btn.addEventListener("click", (e) => {
            const rideId = btn.dataset.rideId;
            e.preventDefault();

            const card = btn.closest(".ride-card"); 
            const result = card.querySelector(".result");

            const payload = JSON.stringify({ userId: user._id, rideId });
            
            fetch(backendUrl + "/api/rides/join-ride", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
              },
              body: payload,
            })
              .then(async (response) => {
                let json = await response.json();
                if (json.success) {
                  result.innerHTML = json.message || "Ride joined successfully!";
                  setTimeout(() => {
                    window.location.href = "/ridesLogin";
                  }, 900);
                } else {
                  console.log(response);
                  result.innerHTML = json.message || "Failed to join ride";
                }
              })
              .catch((error) => {
                console.log(error);
                result.innerHTML = "Something went wrong!";
              });
          });
        });
      }
    } else {
      if (joinBtn) {
        joinBtn.forEach((btn) => {
          btn.addEventListener("click", (e) => {
            e.preventDefault();
            window.location.href = "/login";
          });
        });
      }
    }
  });
</script>
